name: PR Review with Dify
on:
  pull_request:
    types: [opened, synchronize]

jobs:
  review:
    runs-on: ubuntu-latest
    permissions:
      pull-requests: write
      contents: read
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.8'  # Specify the Python version you want to use

      - name: Install dependencies
        run: |
          pip install requests

      - name: Collect PR Data and Send to Dify
        id: dify_request
        run: |
          import os
          import json
          import subprocess
          import requests

          # Get the base and head SHA from the GitHub context
          base_sha = os.environ['GITHUB_BASE_REF']
          head_sha = os.environ['GITHUB_HEAD_REF']

          # Get the list of changed files
          changed_files = subprocess.check_output(
              ['git', 'diff', '--name-only', base_sha, head_sha]
          ).decode('utf-8').strip().split('\n')

          # Get the actual changes in the files
          changed_lines = subprocess.check_output(
              ['git', 'diff', base_sha, head_sha]
          ).decode('utf-8')

          # Create the query text
          query_text = f"Review PR: {os.environ['GITHUB_EVENT_PULL_REQUEST_TITLE']} with changes in files: {', '.join(changed_files)}. Changes: {changed_lines}"

          # Prepare JSON data for Dify API
          json_data = {
              "inputs": {},
              "query": query_text,
              "response_mode": "streaming",
              "conversation_id": "",
              "user": "github"
          }

          # Send request to Dify API
          response = requests.post(
              "https://verf.io/v1/chat-messages",
              headers={
                  "Authorization": f"Bearer {os.environ['DIFY_API_KEY']}",
                  "Content-Type": "application/json"
              },
              data=json.dumps(json_data)
          )

          # Handle streaming response
          response_body = ""
          if response.status_code == 200:
              for line in response.iter_lines():
                  if line.startswith(b'data:'):
                      json_line = line.decode('utf-8')[5:]  # Remove 'data: ' prefix
                      response_body += json_line + "\n"
          else:
              print(f"Error: {response.status_code} - {response.text}")

          # Save the response to a file
          with open('response.json', 'w') as f:
              f.write(response_body)

      - name: Post Review Comment
        if: always()
        uses: actions/github-script@v6
        with:
          script: |
            const fs = require('fs');
            const responseData = fs.readFileSync('response.json', 'utf8');
            const response = JSON.parse(responseData);

            let commentBody;
            if (response) {
              commentBody = response.answer || response.text || 'No review content provided';
            } else {
              commentBody = '⚠️ Error: Failed to generate review.';
            }

            await github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.name,
              body: commentBody
            });
