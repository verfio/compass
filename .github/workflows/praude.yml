name: PR Review with Dify
on:
  pull_request:
    types: [opened, synchronize]

jobs:
  review:
    runs-on: ubuntu-latest
    permissions:
      pull-requests: write
      contents: read
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '16'  # Specify the Node.js version you want to use

      - name: Install dependencies
        run: |
          npm install -g typescript ts-node @types/node axios

      - name: Collect PR Data and Send to Dify
        id: dify_request
        run: |
          echo "const fs = require('fs');" > prReview.ts
          echo "const { execSync } = require('child_process');" >> prReview.ts
          echo "const axios = require('axios');" >> prReview.ts
          echo "const base_sha = process.env.GITHUB_BASE_REF;" >> prReview.ts
          echo "const head_sha = process.env.GITHUB_HEAD_REF;" >> prReview.ts
          echo "const changed_files = execSync('git diff --name-only ' + base_sha + ' ' + head_sha).toString().trim().split('\\n');" >> prReview.ts
          echo "const changed_lines = execSync('git diff ' + base_sha + ' ' + head_sha).toString();" >> prReview.ts
          echo "const query_text = \`Review PR: \${process.env.GITHUB_EVENT_PULL_REQUEST_TITLE} with changes in files: \${changed_files.join(', ')}. Changes: \${changed_lines}\`;" >> prReview.ts
          echo "const json_data = {" >> prReview.ts
          echo "  inputs: {}," >> prReview.ts
          echo "  query: query_text," >> prReview.ts
          echo "  response_mode: 'streaming'," >> prReview.ts
          echo "  conversation_id: ''," >> prReview.ts
          echo "  user: 'github'" >> prReview.ts
          echo "};" >> prReview.ts
          echo "axios.post('https://verf.io/v1/chat-messages', json_data, {" >> prReview.ts
          echo "  headers: {" >> prReview.ts
          echo "    'Authorization': 'Bearer ' + process.env.DIFY_API_KEY," >> prReview.ts
          echo "    'Content-Type': 'application/json'" >> prReview.ts
          echo "  }" >> prReview.ts
          echo "}).then(response => {" >> prReview.ts
          echo "  let response_body = '';" >> prReview.ts
          echo "  response.data.on('data', (line) => {" >> prReview.ts
          echo "    if (line.startsWith('data:')) {" >> prReview.ts
          echo "      response_body += line.substring(5) + '\\n';" >> prReview.ts
          echo "    }" >> prReview.ts
          echo "  });" >> prReview.ts
          echo "  response.data.on('end', () => {" >> prReview.ts
          echo "    fs.writeFileSync('response.json', response_body);" >> prReview.ts
          echo "  });" >> prReview.ts
          echo "}).catch(error => {" >> prReview.ts
          echo "  console.error('Error:', error);" >> prReview.ts
          echo "});" >> prReview.ts
          echo "process.exit(0);" >> prReview.ts

          # Run the TypeScript file
          npx ts-node prReview.ts

      - name: Post Review Comment
        if: always()
        uses: actions/github-script@v6
        with:
          script: |
            const fs = require('fs');
            const responseData = fs.readFileSync('response.json', 'utf8');
            const response = JSON.parse(responseData);

            let commentBody;
            if (response) {
              commentBody = response.answer || response.text || 'No review content provided';
            } else {
              commentBody = '⚠️ Error: Failed to generate review.';
            }

            await github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.name,
              body: commentBody
            });
