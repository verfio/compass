name: PR Review with Dify
on:
  pull_request:
    types: [opened, synchronize]

jobs:
  review:
    runs-on: ubuntu-latest
    permissions:
      pull-requests: write
      contents: read
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Collect PR Data
        id: pr_data
        shell: bash
        run: |
          echo "Collecting PR data..."
          
          # Get the base and head SHA from the GitHub context
          BASE_SHA="${{ github.event.pull_request.base.sha }}"
          HEAD_SHA="${{ github.event.pull_request.head.sha }}"

          # Get the list of changed files
          FILES_CHANGED=$(git diff --name-only $BASE_SHA $HEAD_SHA | tr '\n' ', ')
          
          # Get the actual changes in the files
          CHANGED_LINES=$(git diff $BASE_SHA $HEAD_SHA)

          # Create the query text
          QUERY_TEXT="Review PR: ${{ github.event.pull_request.title }} with changes in files: ${FILES_CHANGED}. Changes: ${CHANGED_LINES}"

          # Prepare JSON data for Dify API
          JSON_DATA=$(jq -n \
            --arg query "$QUERY_TEXT" \
            '{
              inputs: {},
              query: $query,
              response_mode: "streaming",
              conversation_id: "",
              user: "github"
            }')

          # Send request to Dify API
          RESPONSE_BODY=""
          RESPONSE=$(curl -s -N -X POST \
            -H "Authorization: Bearer ${{ secrets.DIFY_API_KEY }}" \
            -H "Content-Type: application/json" \
            -d "$JSON_DATA" \
            "https://verf.io/v1/chat-messages")

          # Handle streaming response
          while IFS= read -r line; do
            # Check if the line starts with "data:"
            if [[ $line == data:* ]]; then
              # Extract the JSON part
              json_data="${line#data: }"
              # Append each parsed JSON to the RESPONSE_BODY
              RESPONSE_BODY+="$json_data"$'\n'
            fi
          done <<< "$RESPONSE"

          # Output the complete response
          echo "Complete Response: $RESPONSE_BODY"
          
          # Save the response to a file
          echo "$RESPONSE_BODY" > response.json

      - name: Post Review Comment
        if: always()
        uses: actions/github-script@v6
        with:
          script: |
            const fs = require('fs');
            const responseData = fs.readFileSync('response.json', 'utf8');
            const response = JSON.parse(responseData);

            let commentBody;
            if (response) {
              commentBody = response.answer || response.text || 'No review content provided';
            } else {
              commentBody = '⚠️ Error: Failed to generate review.';
            }

            await github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.name,
              body: commentBody
            });
