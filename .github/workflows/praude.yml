name: PR Review with Dify
on:
  pull_request:
    types: [opened, synchronize]

jobs:
  review:
    runs-on: ubuntu-latest
    permissions:
      pull-requests: write
      contents: read
    
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Collect PR Data
        id: pr_data
        shell: bash
        run: |
          echo "Collecting PR data..."
          
          # Get files changed
          FILES_CHANGED=$(git diff --name-only ${{ github.event.pull_request.base.sha }} ${{ github.event.pull_request.head.sha }} | tr '\n' ', ')
          
          # Create and escape query
          QUERY_TEXT="Review PR: ${{ github.event.pull_request.title }} with changes in files: ${FILES_CHANGED}"
          QUERY_ESCAPED=$(echo "$QUERY_TEXT" | jq -Rsc .)
          echo "query=${QUERY_ESCAPED}" >> $GITHUB_OUTPUT

      - name: Send to Dify
        id: dify_request
        shell: bash
        run: |
          echo "Sending request to Dify..."
          
          # Generate a UUID for the conversation_id
          CONVERSATION_ID=$(uuidgen)
          
          # Prepare JSON data
          JSON_DATA=$(cat <<EOF
          {
            "inputs": {},
            "query": ${{ steps.pr_data.outputs.query }},
            "response_mode": "streaming",
            "conversation_id": "${CONVERSATION_ID}",
            "user": "github"
          }
          EOF
          )
          
          # Send request
          RESPONSE=$(curl -s -w "\n%{http_code}" \
            -X POST \
            -H "Authorization: Bearer ${{ secrets.DIFY_API_KEY }}" \
            -H "Content-Type: application/json" \
            -d "$JSON_DATA" \
            "https://verf.io/v1/chat-messages")
          
          # Get status code and body
          STATUS_CODE=$(echo "$RESPONSE" | tail -n1)
          RESPONSE_BODY=$(echo "$RESPONSE" | head -n -1)
          
          echo "Status Code: $STATUS_CODE"
          echo "Response: $RESPONSE_BODY"
          
          if [ "$STATUS_CODE" = "200" ]; then
            echo "status=success" >> $GITHUB_OUTPUT
            echo "$RESPONSE_BODY" > response.json
          else
            echo "status=error" >> $GITHUB_OUTPUT
            echo "error_message=API request failed with status $STATUS_CODE" >> $GITHUB_OUTPUT
          fi

      - name: Post Review Comment
        if: always()
        uses: actions/github-script@v6
        with:
          script: |
            const fs = require('fs');
            
            try {
              let commentBody;
              
              if ('${{ steps.dify_request.outputs.status }}' === 'success') {
                const responseData = fs.readFileSync('response.json', 'utf8');
                const response = JSON.parse(responseData);
                commentBody = response.answer || response.text || 'No review content provided';
              } else {
                commentBody = '⚠️ Error: Failed to generate review.\nError: ${{ steps.dify_request.outputs.error_message }}';
              }
              
              await github.rest.issues.createComment({
                issue_number: context.issue.number,
                owner: context.repo.owner,
                repo: context.repo.name,
                body: commentBody
              });
            } catch (error) {
              console.error('Error:', error);
              throw error;
            }
