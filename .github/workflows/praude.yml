name: PR Review with Dify
on:
  pull_request:
    types: [opened, synchronize]

jobs:
  review:
    runs-on: ubuntu-latest
    permissions:
      pull-requests: write
      contents: read
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Collect PR Data
        id: pr_data
        shell: bash
        run: |
          echo "Collecting PR data..."
          
          # Get the base and head SHA from the GitHub context
          BASE_SHA="${{ github.event.pull_request.base.sha }}"
          HEAD_SHA="${{ github.event.pull_request.head.sha }}"

          # Get the list of changed files
          FILES_CHANGED=$(git diff --name-only $BASE_SHA $HEAD_SHA | tr '\n' ', ')
          
          # Get the actual changes in the files
          CHANGED_LINES=$(git diff $BASE_SHA $HEAD_SHA)

          # Get the author's username
          AUTHOR_USERNAME="${{ github.event.pull_request.user.login }}"
          
          # Create the query text
          QUERY_TEXT="Review PR: ${{ github.event.pull_request.title }} with changes in files: ${FILES_CHANGED}. Changes: ${CHANGED_LINES}"

          # Prepare JSON data for Dify API
          JSON_DATA=$(jq -n \
            --arg query "$QUERY_TEXT" \
            --arg author "$AUTHOR_USERNAME" \
            '{
              inputs: {},
              query: $query,
              response_mode: "streaming",
              conversation_id: "",
              user: $author
            }')

          # Send request to Dify API
          RESPONSE_BODY=""
          RESPONSE=$(curl -s -N -X POST \
            -H "Authorization: Bearer ${{ secrets.DIFY_API_KEY }}" \
            -H "Content-Type: application/json" \
            -d "$JSON_DATA" \
            "https://verf.io/v1/chat-messages")

          # Handle streaming response
          while IFS= read -r line; do
            # Check if the line starts with "data:"
            if [[ $line == data:* ]]; then
              # Extract the JSON part
              json_data="${line#data: }"
              # Append each parsed JSON to the RESPONSE_BODY
              RESPONSE_BODY+="$json_data"$'\n'
            fi
          done <<< "$RESPONSE"

          # Output the complete response
          echo "Complete Response: $RESPONSE_BODY"
          
          # Save the response to a file
          echo "$RESPONSE_BODY" > response.json

      - name: Upload Response Artifact
        uses: actions/upload-artifact@v3
        with:
          name: response-artifact
          path: response.json

  post_comment:
    runs-on: ubuntu-latest
    needs: review  # Ensure this job runs after the review job
    permissions:
      pull-requests: write 
    steps:
      - name: Download Response Artifact
        uses: actions/download-artifact@v3
        with:
          name: response-artifact
          path: .

      - name: Post Review Comment
        if: always()
        uses: actions/github-script@v6
        with:
          script: |
            const fs = require('fs');

            // Read the response data
            const responseData = fs.readFileSync('response.json', 'utf8');
            console.log('Response Data:', responseData); // Debugging statement

            let commentBody = '';
            const lines = responseData.split('\n'); // Split the response into lines

            for (const line of lines) {
              if (line.trim()) { // Check if the line is not empty
                try {
                  const response = JSON.parse(line); // Parse each line as JSON
                  if (response.answer) {
                    commentBody += response.answer; // Concatenate the answer
                  }
                } catch (error) {
                  console.error('Error parsing line:', line, error);
                }
              }
            }

            // Log the final comment body
            console.log('Final Comment Body:', commentBody);

            // Extract owner and repo from github.repository
            const [owner, repo] = process.env.GITHUB_REPOSITORY.split('/');

            // Log context values for debugging
            console.log('Context:', {
              issue_number: context.issue.number, // This is the PR number
              owner: owner,
              repo: repo,
            });

            // Post the comment on the pull request
            await github.rest.issues.createComment({
              issue_number: context.issue.number, // Use the PR number here
              owner: owner,
              repo: repo,
              body: commentBody || '⚠️ No review content provided.'
            });
